"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var child_process = _interopRequire(require("child_process"));

var fs = _interopRequire(require("fs"));

var ADB = (function () {
  function ADB() {
    _classCallCheck(this, ADB);

    this.device = [];
    this.selected_device;
  }

  _prototypeProperties(ADB, null, {
    version: {
      value: function version() {

        var child = child_process.spawnSync("adb", ["version"]);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }
        return child.stdout.toString().trim().replace("/\r?\n|\r/ig", "");
      },
      writable: true,
      configurable: true
    },
    devices: {
      value: function devices() {

        var child = child_process.spawnSync("adb", ["devices"]);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }

        var output = child.stdout.toString();
        var match_devices = output.match(/(emulator-)?[\w\d\:\.]+\s+device\n/ig);

        if (match_devices == null) {
          return this.device;
        }if (!match_devices.length) {
          return this.device;
        }for (var k in match_devices) {

          var match_device = match_devices[k].split(/\n/);
          for (var i in match_devices) {
            if (match_devices[i] == "") continue;
            if (!/device/ig.test(match_devices[i])) continue;
            var did = match_devices[i].replace(/\tdevice/ig, "");
            did = did.replace(/\n/ig, "");
            if (this.isDeviceOnList(did)) continue;

            var device_info = this.deviceInfo(did);
            this.device.push(device_info);
          }
        }

        this.selected_device = this.selected_device || this.device[0];
        return this.device;
      },
      writable: true,
      configurable: true
    },
    isDeviceOnList: {
      value: function isDeviceOnList(did) {
        for (var i = 0; i < this.device.length; i++) {
          var device = this.device[i];
          if (device.id == did) {
            return true;
          }
        }
        return false;
      },
      writable: true,
      configurable: true
    },
    userProcessList: {
      value: function userProcessList(device) {

        if (!this.isDeviceAvailable(device)) {
          throw new Error("No device selected");
          return;
        }
        var child = child_process.spawnSync("adb", ["-s", device, "shell", "ps"]);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }
        var output = child.stdout.toString().split("\r\n");
        var list = [];
        for (var i = 0; i < output.length; i++) {
          try {
            var _process = output[i];
            if (!/u\d_\w\d+/.test(_process)) continue;
            _process = _process.split(/\s+/);
            _process = {
              user: _process[0],
              pid: _process[1],
              pkg: _process[8]
            };
            list.push(_process);
          } catch (e) {}
        }
        return list;
      },
      writable: true,
      configurable: true
    },
    deviceInfo: {
      value: function deviceInfo(device) {

        var info = {
          id: device
        };

        var child = child_process.spawnSync("adb", ["-s", device, "shell", "getprop", "ro.product.model"]);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }
        info.model = child.stdout.toString().replace(/\r?\n|\r/ig, "");

        child = child_process.spawnSync("adb", ["-s", device, "shell", "getprop", "ro.build.version.release"]);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }
        info.version = child.stdout.toString().replace(/\r?\n|\r/ig, "");
        return info;
      },
      writable: true,
      configurable: true
    },
    selectDevice: {
      value: function selectDevice(device) {
        this.selected_device = device;
      },
      writable: true,
      configurable: true
    },
    isPackageInstalled: {
      value: function isPackageInstalled(_package_) {

        var packages = this.listPackages();
        for (var i in packages) {
          if (packages[i] == _package_) {
            return true;
          }
        }return false;
      },
      writable: true,
      configurable: true
    },
    promptUninstall: {
      value: function promptUninstall(_package_) {

        if (!this.selected_device) {
          throw new Error("No device selected");
          return;
        }
        var did = this.selected_device.id;
        if (!this.isDeviceAvailable(did)) {
          throw new Error("Device no longer available");
          return;
        }

        var params = ["shell", "am", "start", "-a", "android.intent.action.DELETE", "-d", "package:" + _package_];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }

        var child = child_process.spawnSync("adb", params);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }
        var output = child.stdout.toString().trim().replace(/\r?\n|\r/, "");
        return output;
      },
      writable: true,
      configurable: true
    },
    getDeviceWlan0: {
      value: function getDeviceWlan0() {
        if (!this.selected_device) {
          throw new Error("No device selected");
          return;
        }
        var did = this.selected_device.id;
        if (!this.isDeviceAvailable(did)) {
          throw new Error("Device no longer available");
          return;
        }
        // shell ip -f inet addr show wlan0
        var params = ["shell", "ip", "-f", "inet", "addr", "show", "wlan0"];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }
        var child = child_process.spawnSync("adb", params);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }
        var output = child.stdout.toString().trim().replace(/\r?\n|\r/, "");
        if (output.trim() == "") {
          return null;
        }
        output = output.replace(/\r?\n|\r|\t/, "").trim();
        var re = /inet\s*\d+\.\d+\.\d+\.\d+/ig;
        var ip = output.match(re);
        if (ip == null) {
          throw new Error("Error getting device wlan0 ip");
          return;
        }
        return ip[0].replace("inet", "").trim();
      },
      writable: true,
      configurable: true
    },
    tcpDisconnect: {
      value: function tcpDisconnect(ip) {

        var params = ["disconnect", ip];
        var child = child_process.spawnSync("adb", params);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }
        var output = child.stdout.toString().trim().replace(/\r?\n|\r/, "");
        return output;
      },
      writable: true,
      configurable: true
    },
    tcpConnect: {
      value: function tcpConnect() {
        if (!this.selected_device) {
          throw new Error("No device selected");
          return;
        }
        var did = this.selected_device.id;
        if (!this.isDeviceAvailable(did)) {
          throw new Error("Device no longer available");
          return;
        }
        if (did.indexOf("5555") != -1) {
          throw new Error("Device already connected!");
          return;
        }
        var ip = this.getDeviceWlan0();
        if (ip == null) {
          throw new Error("Device not connected to Wifi");
          return;
        }

        var params = ["tcpip", "5555"];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }
        var child = child_process.spawnSync("adb", params);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }
        var output = child.stdout.toString().trim().replace(/\r?\n|\r/, "");
        if (output != "restarting in TCP mode port: 5555") {
          throw new Error("Error restarting in TCP Mode");
          return;
        }

        var conn = [ip, "5555"].join(":");
        params = ["connect", conn];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }

        child = child_process.spawnSync("adb", params);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }
        output = child.stdout.toString().trim().replace(/\r?\n|\r/, "");
        if (output != "connected to " + conn) {
          throw new Error("Error connecting device; " + output);
          return;
        }
        return conn;
      },
      writable: true,
      configurable: true
    },
    uninstall: {
      value: function uninstall(_package_) {

        if (!this.selected_device) {
          throw new Error("No device selected");
          return;
        }
        var did = this.selected_device.id;
        if (!this.isDeviceAvailable(did)) {
          throw new Error("Device no longer available");
          return;
        }

        var params = ["shell", "pm", "uninstall", "-k", _package_];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }
        var child = child_process.spawnSync("adb", params);
        return !this.isPackageInstalled(_package_);
      },
      writable: true,
      configurable: true
    },
    install: {
      value: function install(apk_path, _package_) {

        if (!this.selected_device) {
          throw new Error("No device selected");
          return;
        }
        var did = this.selected_device.id;
        if (!this.isDeviceAvailable(did)) {
          throw new Error("Device no longer available");
          return;
        }

        if (!fs.existsSync(apk_path)) throw new Error("Apk file not found!");

        var params = ["install", apk_path];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }
        var child = child_process.spawnSync("adb", params);
        return this.isPackageInstalled(_package_);
      },
      writable: true,
      configurable: true
    },
    packageInfo: {
      value: function packageInfo(_package_) {

        if (!this.selected_device) {
          throw new Error("No device selected");
          return;
        }
        var did = this.selected_device.id;
        if (!this.isDeviceAvailable(did)) {
          throw new Error("Device no longer available");
          return;
        }

        var params = ["shell", "dumpsys", "package", _package_];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }
        var child = child_process.spawnSync("adb", params);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
        }

        var output = child.stdout.toString().trim().replace(/\r?\n|\r/ig, "");
        if (output == "") throw new Error("Package not found");

        var info = {
          id: _package_
        };
        info.versionCode = output.match(/versionCode=\d+/)[0].replace(/versionCode=/, "");
        info.versionName = output.match(/versionName=[\d\.\w]+/)[0].replace(/versionName=/, "");
        info.targetSdk = output.match(/targetSdk=\d+/)[0].replace(/targetSdk=/, "");
        return info;
      },
      writable: true,
      configurable: true
    },
    isAppRunning: {
      value: function isAppRunning(_package_) {

        if (!this.selected_device) {
          throw new Error("No device selected");
          return;
        }
        var did = this.selected_device.id;
        if (!this.isDeviceAvailable(did)) {
          throw new Error("Device no longer available");
          return;
        }

        var params = ["shell", "ps"];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }

        var child = child_process.spawnSync("adb", params);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
        }

        var output = child.stdout.toString();
        return output.indexOf(_package_) != -1 ? true : false;
      },
      writable: true,
      configurable: true
    },
    closeApp: {
      value: function closeApp(_package_) {

        if (!this.selected_device) {
          throw new Error("No device selected");
          return;
        }
        var did = this.selected_device.id;
        if (!this.isDeviceAvailable(did)) {
          throw new Error("Device no longer available");
          return;
        }

        var params = ["shell", "am", "force-stop", _package_];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }

        var child = child_process.spawnSync("adb", params);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
        }
      },
      writable: true,
      configurable: true
    },
    listPackages: {
      value: function listPackages() {

        if (!this.selected_device) {
          throw new Error("No device selected");
          return;
        }
        var did = this.selected_device.id;
        if (!this.isDeviceAvailable(did)) {
          throw new Error("Device no longer available");
          return;
        }

        var params = ["shell", "pm", "list", "packages"];
        if (did) {
          params.unshift(did);
          params.unshift("-s");
        }

        var child = child_process.spawnSync("adb", params);
        if (child.stderr && child.stderr.toString() != "") {
          throw new Error(" " + child.stderr);
          return;
        }

        var output = child.stdout.toString();
        var list = output.split(/\n/);

        var packages = [];
        if (!list.length) {
          return packages;
        }for (var i in list) {

          if (list[i] == "") continue;

          var pkg = list[i];
          pkg = pkg.replace("package:", "");
          pkg = pkg.replace(/\r/, "");

          packages.push(pkg);
        }

        return packages;
      },
      writable: true,
      configurable: true
    },
    isDeviceAvailable: {
      value: function isDeviceAvailable(device_id) {
        try {
          var devices = this.devices();
          for (var i in devices) {
            if (devices[i].id == device_id) return true;
          }
        } catch (e) {}
        return false;
      },
      writable: true,
      configurable: true
    }
  });

  return ADB;
})();

module.exports = ADB;

